%class "Parser";

%terminals            SEMI, COMMA, DOT;
%terminals            CLASS, PUBLIC, STATIC, VOID, MAIN, NEW, EXTENDS;
%terminals            PRINT, LENGTH;
%terminals            PLUS, MINUS, TIMES;
%terminals            LPAREN, RPAREN, LBRACK, RBRACK, LBRACE, RBRACE;
%terminals            IF, ELSE, WHILE;
%terminals            TRUE, FALSE, NOT, AND;
%terminals            RETURN, THIS;
%terminals            STRING, INT, BOOLEAN;
%terminals            EQUALS, LESS;
%terminals            INT_LIT;        // our scanner provides numbers as integers
%terminals            ID;

%left DOT;
%left LBRACK;
%left AND;
%left PLUS, MINUS;
%left TIMES;
%left LESS;
%left ID;

%typeof INT_LIT = "Integer";
%typeof ID = "String";

%goal Program;

Program = MainClass ClassDeclList;

ClassDeclList = ClassDeclList ClassDecl
|;

MainClass = CLASS ID.i1 LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACK RBRACK ID.i2 RPAREN LBRACE Statement RBRACE RBRACE;

ClassDecl = CLASS ID.i LBRACE VarDecl* MethodDecl* RBRACE
| CLASS ID.i EXTENDS ID.i LBRACE VarDecl* MethodDecl* RBRACE;

VarDecl = Type ID.i;

MethodDecl = PUBLIC Type ID.i LPAREN FormalList RPAREN LBRACE VarDecl* Statement* RETURN Exp SEMI RBRACE;

FormalList = Type ID FormalRest*
|;

FormalRest = COMMA Type ID;

Type = INT LBRACK RBRACK
| BOOLEAN
| INT
| ID.i;

Statement = LBRACE Statement* RBRACE
| IF LPAREN Exp RPAREN Statement ELSE Statement
| WHILE LPAREN Exp RPAREN Statement
| PRINT LPAREN Exp RPAREN SEMI
| ID EQUALS Exp SEMI
| ID LBRACK Exp RBRACK EQUALS Exp SEMI;

Exp = Exp.e1 TIMES Exp.e2 {: return new Times(e1, e2); :}
| Exp.e1 PLUS Exp.e2 {: return new Plus(e1, e2); :}
| Exp.e1 MINUS Exp.e2 {: return new Minus(e1, e2); :}
| Exp.e1 LESS Exp.e2 {: return new LessThan(e1, e2); :}
| Exp.e1 AND Exp.e2 {: return new And(e1, e2); :}
| Exp.e1 LBRACK Exp.e2 RBRACK {: return new ArrayLookup(e1, e2); :}
| Exp.e DOT LENGTH {: return new ArrayLength(e); :}
| Exp.e DOT ID.i LPAREN ExpList.el RPAREN {: return new Call(e, i, el); :}
| INT_LIT.i {: return new IntegerLiteral(i); :}
| TRUE {: return new True(); :}
| FALSE {: return new False(); :}
| ID.s {: return new IdentifierExp(s); :}
| THIS {: return new This(); :}
| NEW INT LBRACK Exp.e RBRACK {: return new NewArray(e); :}
| NEW ID.i LPAREN RPAREN {: return new NewObject(i); :}
| NOT Exp.e {: return new Not(e); :}
| LPAREN Exp.e RPAREN {: return e; :}
;

ExpList = Exp ExpRest*
|;

ExpRest = COMMA Exp;
